<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_playerside</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>PlayerSpeed = 10;
PlayerHealthPoints = 100;
PlayerMove = true;
CanShoot = true;
HasPistol = true;
HasRocketLauncher = false;
HasMachineGun = false;
HasShotGun = false;
image_blend = c_blue;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>CanShoot = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (global.weapon2 = "normal")
{
    HasMachineGun = false;
    HasShotGun = false;
    HasRocketLauncher = false;
    
    HasPistol = true;
}
else if (global.weapon2 = "rapid")
{
    HasShotGun = false;
    HasRocketLauncher = false;
    HasPistol = false;    

    HasMachineGun = true;
}
else if (global.weapon2 = "shot")
{
    HasMachineGun = false;
    HasRocketLauncher = false;
    HasPistol = false;

    HasShotGun = true;
}
else if (global.weapon2 = "rocket")
{
    HasMachineGun = false;
    HasShotGun = false;
    HasPistol = false;

    HasRocketLauncher = true;
}






if global.pants2 = true
{
    image_blend = c_yellow;
}

if global.pants2 = false
{
    image_blend = c_blue;
}


KeyUp = keyboard_check(vk_up);
KeyLeft = keyboard_check(vk_left);
KeyDown = keyboard_check(vk_down);
KeyRight = keyboard_check(vk_right);

KeyAction = keyboard_check(ord('P'));

if (KeyLeft &amp;&amp; KeyRight || KeyDown &amp;&amp; KeyUp)
{
    PlayerMove = false;
}
else
{  
    //PlayerMove UP 
    if (KeyUp) &amp;&amp; !place_meeting(x, y - PlayerSpeed, obj_wall)
    {
        y -= PlayerSpeed;
    }
    
    //PlayerMove DOWN
    if (KeyDown) &amp;&amp; !place_meeting(x, y + PlayerSpeed, obj_wall)
    {
        y += PlayerSpeed;
    }
    
    //PlayerMove LEFT
    if (KeyLeft) &amp;&amp; !place_meeting(x - PlayerSpeed, y, obj_wall)
    {
        x -= PlayerSpeed;
    }
    
    //PlayerMove RIGHT
    if (KeyRight) &amp;&amp; !place_meeting(x + PlayerSpeed, y, obj_wall)
    {
        x += PlayerSpeed;
    }     
}

//Keeps player in the room.
x = clamp(x, 0, room_width); 
y = clamp(y, 0, room_height); 




if (HasPistol)
{
    if (CanShoot)
    {
        if (KeyAction)
        {
            CanShoot = false;
            alarm[0] = 1 * room_speed;
            instance_create(obj_Player2.x, obj_Player2.y - 50, obj_Bullet2);
        }
    }
}
else if (HasRocketLauncher)
{
    if (CanShoot)
    {
        if (KeyAction)
        {
            CanShoot = false;
            alarm[0] = 0.75 * room_speed;
            instance_create(obj_Player2.x, obj_Player2.y - 50, obj_Bullet2);
        }
    }
}
else if (HasMachineGun)
{
    if (CanShoot)
    {
        if (KeyAction)
        {
            CanShoot = false;
            alarm[0] = 0.25 * room_speed;
            instance_create(obj_Player2.x, obj_Player2.y - 50, obj_Bullet1);
        }
    }
}
else if (HasShotGun)
{
    if (CanShoot)
    {
        if (KeyAction)
        {
            CanShoot = false;
            alarm[0] = 1 * room_speed;
            instance_create(obj_Player2.x, obj_Player2.y - 0, obj_Bullet2);
            instance_create(obj_Player2.x, obj_Player2.y - 50, obj_Bullet2);
            instance_create(obj_Player2.x, obj_Player2.y - 100, obj_Bullet2);
        }
    }
}

if (place_meeting(x, y, obj_Bullet1))
{
    PlayerHealthPoints -= 10;
}

if (PlayerHealthPoints &lt;= 0)
{
    //GAME OVER
}

if (global.pants2) &amp;&amp; place_meeting(x,y,obj_home1)
{
    room_goto(room2);
}

if (global.pants2) &amp;&amp; place_meeting(x,y,obj_Bullet1)
{
    global.pants2 = false;
    instance_create(x, y, obj_pants);
    x = obj_home2.x;
    y = obj_home2.y;
}

if (global.pants2 == false) &amp;&amp; place_meeting(x,y,obj_Bullet1)
{
    x = obj_home2.x;
    y = obj_home2.y;
}





/*
switch (keyboard_key)
{
    //case ord('W'):
    case vk_up:
        y -= 4;
        break;
    //case ord('A'):
    case vk_left:
        x -= 4;
        break;
    //case ord('S'):
    case vk_down:
        y += 4;
        break;
    //case ord('D'):
    case vk_right:
        x += 4;
        break;
    default:
        //do nothing for now...
        ;
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_text(600, 600, PlayerHealthPoints);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

if global.weapon2 = "normal"
{
draw_sprite_ext(spr_gun,0,x,y,1,1,0,c_black,1);
}

if global.weapon2 = "rapid"
{
draw_sprite_ext(spr_gun,0,x,y,1,1,0,c_red,1);
}

if global.weapon2 = "shot"
{
draw_sprite_ext(spr_gun,0,x,y,1,1,0,c_blue,1);
}

if global.weapon2 = "rocket"
{
draw_sprite_ext(spr_gun,0,x,y,1,1,0,c_green,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
